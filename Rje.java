/*
 *  Copyright (c) May 11, 2020 by James D. Gay
 */
package Rje3780;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import Rje3780.MainLoop.*;
import static Rje3780.MainLoop.updateStatus;
import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author james
 */
public class Rje extends javax.swing.JFrame {

    File currentDirectory = null;
    String currentDirectoryAbsolutePath = "";
    File logFileSaveArea = null;
    static String version = "2.8";
    static String buildDate = "Sept 12, 2020";

    /**
     * Creates new form Rje
     */
    public Rje() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        mainWindowScrollPanel = new javax.swing.JScrollPane();
        mainWindow = new javax.swing.JTextArea();
        commandField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        hostField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        statusField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        systemField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        stateField = new javax.swing.JTextField();
        mainMenuBar = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Configuration = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        Operate = new javax.swing.JMenu();
        LogOntoMVS = new javax.swing.JMenuItem();
        SubmitJob = new javax.swing.JMenuItem();
        logOutOfMVS = new javax.swing.JMenuItem();
        Log = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("frame"); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("RJE 3780 Emulator V2.2"), this, org.jdesktop.beansbinding.BeanProperty.create("title"));
        bindingGroup.addBinding(binding);

        mainWindow.setColumns(20);
        mainWindow.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        mainWindow.setLineWrap(true);
        mainWindow.setRows(5);
        mainWindowScrollPanel.setViewportView(mainWindow);

        commandField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                commandFieldKeyPressedActionPerformed(evt);
            }
        });

        jLabel1.setText("Command");

        jLabel2.setText("Host");

        jLabel3.setText("Status");

        statusField.setText("Disconnected");

        jLabel4.setText("System");

        jLabel5.setText("State");

        stateField.setBackground(java.awt.Color.red);
        stateField.setText("NoLink");

        File.setText("File");

        Configuration.setText("Configuration");
        Configuration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigurationActionPerformed(evt);
            }
        });
        File.add(Configuration);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        jMenuItem4.setText("Emergency Exit");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmergencyExitActionPerformed(evt);
            }
        });
        File.add(jMenuItem4);

        mainMenuBar.add(File);

        Operate.setText("Operate");

        LogOntoMVS.setText("Log onto MVS");
        LogOntoMVS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogOntoMVSActionPerformed(evt);
            }
        });
        Operate.add(LogOntoMVS);

        SubmitJob.setText("Submit Job");
        SubmitJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitJobActionPerformed(evt);
            }
        });
        Operate.add(SubmitJob);

        logOutOfMVS.setText("Log off of MVS");
        logOutOfMVS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutOfMVSActionPerformed(evt);
            }
        });
        Operate.add(logOutOfMVS);

        mainMenuBar.add(Operate);

        Log.setText("Log");

        jMenuItem1.setText("Clear Log Window");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearLogWindowActionPerformed(evt);
            }
        });
        Log.add(jMenuItem1);

        jMenuItem2.setText("Save Log Window");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveLogWindowActionPerformed(evt);
            }
        });
        Log.add(jMenuItem2);

        mainMenuBar.add(Log);

        Help.setText("Help");

        jMenuItem3.setText("About");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpAboutActionPerformed(evt);
            }
        });
        Help.add(jMenuItem3);

        jMenuItem5.setText("Counters");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CountersActionPerformed(evt);
            }
        });
        Help.add(jMenuItem5);

        mainMenuBar.add(Help);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commandField))
                    .addComponent(mainWindowScrollPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 844, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hostField, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(systemField, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stateField)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(mainWindowScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(hostField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(statusField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(systemField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(stateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SubmitJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitJobActionPerformed

        //
        //  Make sure we are connected
        //
        JFileChooser fc;
        if (MainLoop.status == Stat.Nolink || MainLoop.status == Stat.Shutdown1 || MainLoop.status == Stat.Shutdown2) {
            JOptionPane.showMessageDialog(null, "Not connected to any system");
            return;
        }
        //
        //  Put up the chooser
        //
        fc = new JFileChooser(MainLoop.defaultDirectory);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JCL Files", "jcl");
        if (currentDirectory != null) {
            fc.setCurrentDirectory(currentDirectory);
        }
        fc.setFileFilter(filter);
        fc.showOpenDialog(null);
        //
        //  Remember the directory so we can save it
        //
        currentDirectory = fc.getCurrentDirectory();

        //
        //  Exit if cancel was chosen
        //
        if (fc.getSelectedFile() == null) {
            return;
        }

        //
        //  Save update file information
        //
        MainLoop.defaultDirectory = currentDirectory.getAbsolutePath() + "/";
        saveConfiguration();

        //
        //  Send off the file
        //
        MainLoop.sendFile(fc.getSelectedFile().toString());
    }//GEN-LAST:event_SubmitJobActionPerformed

    private void logOutOfMVSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutOfMVSActionPerformed
        //
        //  IF we not connected or shutting down ignore
        //
        if (MainLoop.status == Stat.Nolink || MainLoop.status == Stat.Shutdown1 || MainLoop.status == Stat.Shutdown2) {
            JOptionPane.showMessageDialog(null, "Not connected to any system");
            return;
        }
        MainLoop.logOutOfMVS();
    }//GEN-LAST:event_logOutOfMVSActionPerformed

    private void commandFieldKeyPressedActionPerformed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_commandFieldKeyPressedActionPerformed
        //
        //  Carriage Return pressed
        if (evt.getKeyCode() == 10) {
            //
            //  If we are not connected or shutting down ignore
            //
            if (MainLoop.status == Stat.Nolink || MainLoop.status == Stat.Shutdown1 || MainLoop.status == Stat.Shutdown2) {
                JOptionPane.showMessageDialog(null, "Not connected to any system");
                commandField.setText("");
                return;
            }
            //
            //  Send the command to be processed
            //
            MainLoop.commandLine = commandField.getText().toUpperCase();
            MainLoop.sendCommand();
        }
    }//GEN-LAST:event_commandFieldKeyPressedActionPerformed

    private void LogOntoMVSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogOntoMVSActionPerformed
        //
        //  If we are already connected or connecting ignore
        //
        if (MainLoop.status != Stat.Nolink) {
            JOptionPane.showMessageDialog(null, "You are already connected to a system.");
            return;
        }
        MainLoop.logOntoMVS();
    }//GEN-LAST:event_LogOntoMVSActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        //
        //  Save the latest configuration
        //
        saveConfiguration();
        //
        //  If we are not connected just exit
        //
        if (MainLoop.status == Stat.Nolink) {
            System.exit(0);
        }

        //
        //  Start shutdown procedure by first logging out of MVS
        //
        MainLoop.exit = true;
        MainLoop.logOutOfMVS();
    }//GEN-LAST:event_ExitActionPerformed

    private void ConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigurationActionPerformed

        //
        //  Put up a dialog box containing the remote systems information
        //
        javax.swing.JTextField text0 = new javax.swing.JTextField(25);
        text0.setText(MainLoop.hostName);
        javax.swing.JTextField text2 = new javax.swing.JTextField(10);
        text2.setText(Integer.toString(MainLoop.hostPort));
        javax.swing.JTextField text3 = new javax.swing.JTextField(25);
        text3.setText(MainLoop.defaultDirectory);
        javax.swing.JTextField text4 = new javax.swing.JTextField(25);
        text4.setText(MainLoop.defaultPrintDirectory);
        javax.swing.JTextField text5 = new javax.swing.JTextField(25);
        text5.setText(MainLoop.defaultPunchDirectory);
        javax.swing.JTextField text6 = new javax.swing.JTextField(10);
        text6.setText(MainLoop.signon);
        javax.swing.JTextField text7 = new javax.swing.JTextField(10);
        text7.setText(MainLoop.password);
        javax.swing.JRadioButton traceOn = new javax.swing.JRadioButton("Trace Enabled");
        javax.swing.JRadioButton sshTunnel = new javax.swing.JRadioButton("SSH Tunnel        SSH PEM File:");
        sshTunnel.setSelected(MainLoop.createSSHTunnel);
        javax.swing.JTextField text8 = new javax.swing.JTextField(25);
        text8.setText(MainLoop.pemFile);
        javax.swing.JTextField text9 = new javax.swing.JTextField(15);
        text9.setText(MainLoop.sshUsername);
        javax.swing.JTextField text10 = new javax.swing.JTextField(15);
        text10.setText(MainLoop.sshPassword);
        javax.swing.JRadioButton removeExtraPrintBlankLines = new javax.swing.JRadioButton("Remove Extra Printer Blank Lines");
        removeExtraPrintBlankLines.setSelected(MainLoop.removeExtraPrinterBlankLines);
        javax.swing.JRadioButton removePunchHeaderCards = new javax.swing.JRadioButton("Remove Punch Header Cards");
        removePunchHeaderCards.setSelected(MainLoop.removeExtraPunchCards);
        traceOn.setSelected(MainLoop.traceOn);
        javax.swing.JRadioButton showPunchWindow = new javax.swing.JRadioButton("Enable punch window");
        showPunchWindow.setSelected(MainLoop.punchWindow);
        javax.swing.JRadioButton clearPunchWindow = new javax.swing.JRadioButton("Clear punch window");
        clearPunchWindow.setSelected(MainLoop.clearPunchTextArea);
        javax.swing.JRadioButton showPrintWindow = new javax.swing.JRadioButton("Enable print window");
        showPrintWindow.setSelected(MainLoop.printWindow);
        javax.swing.JRadioButton clearPrintWindow = new javax.swing.JRadioButton("Clear print window");
        clearPrintWindow.setSelected(MainLoop.clearPrintTextArea);

        javax.swing.JPanel panel = new javax.swing.JPanel();
        panel.setLayout(new GridBagLayout());
        GridBagConstraints constraints = new GridBagConstraints();
        constraints.anchor = GridBagConstraints.WEST;
        constraints.gridx = 0;
        constraints.gridy = 0;
        panel.add(new javax.swing.JLabel("MVS Host Name: "), constraints);
        constraints.gridx = 1;
        panel.add(text0, constraints);
        constraints.gridx = 2;
        panel.add(new javax.swing.JLabel("MVS Rje Port: "), constraints);
        constraints.gridx = 3;
        panel.add(text2, constraints);
        constraints.gridx = 0;
        constraints.gridy = 1;
        panel.add(sshTunnel, constraints);
        constraints.gridx = 1;
        panel.add(text8, constraints);
        constraints.gridx = 2;
        panel.add(new javax.swing.JLabel("SSH Username:"), constraints);
        constraints.gridx = 3;
        panel.add(text9, constraints);
        constraints.gridy = 3;
        constraints.gridx = 2;
        panel.add(new javax.swing.JLabel("SSH Password:"), constraints);
        constraints.gridx = 3;
        panel.add(text10, constraints);
        constraints.gridx = 0;
        constraints.gridy = 4;
        panel.add(new javax.swing.JLabel("Default Directory: "), constraints);
        constraints.gridx = 1;
        panel.add(text3, constraints);
        constraints.gridx = 0;
        constraints.gridy = 5;
        panel.add(new javax.swing.JLabel("Print Directory: "), constraints);
        constraints.gridx = 1;
        panel.add(text4, constraints);
        constraints.gridx = 0;
        constraints.gridy = 6;
        panel.add(new javax.swing.JLabel("Punch Directory: "), constraints);
        constraints.gridx = 1;
        panel.add(text5, constraints);
        constraints.gridx = 0;
        constraints.gridy = 7;
        panel.add(new javax.swing.JLabel("Signon: "), constraints);
        constraints.gridx = 1;
        panel.add(text6, constraints);
        constraints.gridx = 0;
        constraints.gridy = 8;
        panel.add(new javax.swing.JLabel("Password: "), constraints);
        constraints.gridx = 1;
        panel.add(text7, constraints);
        constraints.gridx = 0;
        constraints.gridy = 9;
        panel.add(traceOn, constraints);
        constraints.gridy = 10;
        panel.add(removeExtraPrintBlankLines, constraints);
        constraints.gridy = 11;
        panel.add(removePunchHeaderCards, constraints);
        constraints.gridy = 12;
        panel.add(showPunchWindow, constraints);
        constraints.gridx = 1;
        panel.add(clearPunchWindow, constraints);
        constraints.gridy = 13;
        constraints.gridx = 0;
        panel.add(showPrintWindow, constraints);
        constraints.gridx = 1;
        panel.add(clearPrintWindow, constraints);
        int showConfirmDialog = javax.swing.JOptionPane.showConfirmDialog(null, panel, "Configuration", javax.swing.JOptionPane.OK_CANCEL_OPTION);

        //
        //  Save values if OK was pressed
        //
        if (showConfirmDialog == 0) {

            //
            //  Get the updated values
            //
            MainLoop.hostName = text0.getText();
            MainLoop.hostPort = Integer.decode(text2.getText());
            MainLoop.defaultDirectory = text3.getText();
            if (!MainLoop.defaultDirectory.substring(MainLoop.defaultDirectory.length() - 1).equals("/")) {
                MainLoop.defaultDirectory += "/";
            }
            MainLoop.defaultPrintDirectory = text4.getText();
            if (!MainLoop.defaultPrintDirectory.substring(MainLoop.defaultPrintDirectory.length() - 1).equals("/")) {
                MainLoop.defaultPrintDirectory += "/";
            }
            MainLoop.defaultPunchDirectory = text5.getText();
            if (!MainLoop.defaultPunchDirectory.substring(MainLoop.defaultPunchDirectory.length() - 1).equals("/")) {
                MainLoop.defaultPunchDirectory += "/";
            }
            MainLoop.signon = text6.getText();
            MainLoop.password = text7.getText();
            MainLoop.pemFile = text8.getText();
            MainLoop.sshUsername = text9.getText();
            MainLoop.sshPassword = text10.getText();
            MainLoop.createSSHTunnel = sshTunnel.isSelected();
            if (traceOn.isSelected()) {
                if (!MainLoop.traceOn) {
                    MainLoop.updateStatus("Tracing Enabled");
                }
                MainLoop.traceOn = true;
            } else {
                if (MainLoop.traceOn) {
                    MainLoop.updateStatus("Tracing Disabled");
                }
                MainLoop.traceOn = false;
            }
            MainLoop.removeExtraPrinterBlankLines = removeExtraPrintBlankLines.isSelected();
            MainLoop.removeExtraPunchCards = removePunchHeaderCards.isSelected();
            //
            //  If punch windows is selected put up the punch window
            //
            MainLoop.punchWindow = showPunchWindow.isSelected();
            punchWindow(MainLoop.punchWindow);
            //
            //  If print window is selected put up the pring window
            //
            MainLoop.printWindow = showPrintWindow.isSelected();
            printWindow(MainLoop.printWindow);
            //
            //  If punch windows is to be cleared
            //
            MainLoop.clearPunchTextArea = clearPunchWindow.isSelected();
            punchWindow(MainLoop.clearPunchTextArea);
            //
            //  If print window is to be cleared
            //
            MainLoop.clearPrintTextArea = clearPrintWindow.isSelected();
            printWindow(MainLoop.clearPrintTextArea);
            //
            //  Save the current configuration
            //
            saveConfiguration();
        }
    }//GEN-LAST:event_ConfigurationActionPerformed

    private void ClearLogWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearLogWindowActionPerformed
        //
        //  Clear the log window
        //
        String helpText = "";
        helpText += "RJE000I - RJE 3780 Emulator V" + version + " Started\r\n";
        helpText += "       \u00a9 James D. Gay - " + buildDate;
        mainWindow.setText("");
        updateStatus(helpText);
    }//GEN-LAST:event_ClearLogWindowActionPerformed

    private void SaveLogWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveLogWindowActionPerformed
        //
        //  Save the log window to disk
        //
        FileWriter fw = null;
        try {
            //
            //  Put up the file chooser
            //
            JFileChooser fc;
            fc = new JFileChooser(MainLoop.defaultDirectory);
            if (logFileSaveArea != null) {
                fc.setCurrentDirectory(logFileSaveArea);
            }
            fc.showSaveDialog(null);
            logFileSaveArea = fc.getCurrentDirectory();
            if (fc.getSelectedFile() == null) {
                return;
            }
            //
            //  Open up the file and save the log window in it
            //
            fw = new FileWriter(fc.getSelectedFile());
            mainWindow.write(fw);
            fw.flush();
            fw.close();

        } catch (IOException ex) {
            Logger.getLogger(Rje.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (fw != null) {
                    fw.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(Rje.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_SaveLogWindowActionPerformed

    private void HelpAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpAboutActionPerformed
        //
        //  Put up a dialog box containing the remote systems information
        //
        String helpText = "";
        helpText += "RJE 3780 Emulator Version " + version + "\r\n";
        helpText += "2780/3780 RJE Station for Hercules\r\n";
        helpText += "Tested Extensively with Hyperion and MVS 3.8J\r\n";
        helpText += "\r\n";
        helpText += "\u00a9 James D. Gay - " + buildDate;
        JOptionPane.showMessageDialog(null, helpText, "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_HelpAboutActionPerformed

    private void EmergencyExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmergencyExitActionPerformed
        //
        //  Make sure they want to emergency exit
        //
        int reply = JOptionPane.showConfirmDialog(null, "Are you absolutely sure?  This could hang the RJE channel!", "Emergency Exit", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            System.exit(-1);
        }
    }//GEN-LAST:event_EmergencyExitActionPerformed

    private void CountersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CountersActionPerformed
        //
        //  Put out the counters
        //
        String counterText = "";
        counterText += "Bytes received = " + NumberFormat.getNumberInstance(Locale.US).format(MainLoop.bytesReceived) + "\r\n";
        counterText += "Bytes sent = " + NumberFormat.getNumberInstance(Locale.US).format(MainLoop.bytesSent) + "\r\n";
        counterText += "Lines printed " + NumberFormat.getNumberInstance(Locale.US).format(MainLoop.linesPrinted) + "\r\n";
        counterText += "Cards read = " + NumberFormat.getNumberInstance(Locale.US).format(MainLoop.cardsRead) + "\r\n";
        counterText += "Cards punched = " + NumberFormat.getNumberInstance(Locale.US).format(MainLoop.cardsPunched) + "\r\n";
        JOptionPane.showMessageDialog(null, counterText, "BISYNC Counters", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_CountersActionPerformed

    private void saveConfiguration() {
        //
        //  Save the updated values
        //
        PrintWriter fo = null;
        try {

            String home = System.getProperty("user.home");
            fo = new PrintWriter(new FileOutputStream(new File(home + "/rje3780.cfg")));
            fo.println(MainLoop.hostName);
            fo.println(MainLoop.hostPort);
            fo.println(MainLoop.defaultDirectory);
            fo.println(MainLoop.defaultPrintDirectory);
            fo.println(MainLoop.defaultPunchDirectory);
            fo.println(MainLoop.signon);
            fo.println(MainLoop.password);
            fo.println(MainLoop.pemFile);
            fo.println(MainLoop.createSSHTunnel);
            fo.println(MainLoop.sshUsername);
            fo.println(MainLoop.sshPassword);
            fo.println(MainLoop.traceOn);
            fo.println(MainLoop.removeExtraPrinterBlankLines);
            fo.println(MainLoop.removeExtraPunchCards);
            fo.println(MainLoop.punchWindow);
            fo.println(MainLoop.printWindow);
            fo.println(MainLoop.clearPunchTextArea);
            fo.println(MainLoop.clearPrintTextArea);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Rje.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (fo != null) {
                fo.close();
            }
        }
    }

    private static void punchWindow(boolean create) {
        if (create) {
            //
            //  Create the punch window
            //
            if (MainLoop.punchFrame == null) {
                MainLoop.punchFrame = new JFrame("Punch Window");
                JPanel panel = new JPanel();
                JScrollPane scrollBar = new JScrollPane(panel, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
                MainLoop.punchFrame.add(scrollBar);
                MainLoop.punchTextArea = new JTextArea(800, 800);
                MainLoop.punchTextArea.setFont(new Font("Lucida Sans Typewriter", Font.PLAIN, 12));
                panel.add(MainLoop.punchTextArea, BorderLayout.NORTH);
                int width = 800;
                int height = 800;
                MainLoop.punchFrame.setSize(width, height);
                MainLoop.punchFrame.setVisible(true);
            }
        } else {
            //
            //  Eliminate the punch window
            //
            if (MainLoop.punchFrame != null) {
                MainLoop.punchFrame.dispose();
                MainLoop.punchFrame = null;
            }
        }
    }

    private static void printWindow(boolean create) {
        if (create) {
            //
            //  Create the print window
            //
            if (MainLoop.printFrame == null) {
                MainLoop.printFrame = new JFrame("Printer Window");
                JPanel panel = new JPanel();
                JScrollPane scrollBar = new JScrollPane(panel, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
                MainLoop.printFrame.add(scrollBar);
                MainLoop.printTextArea = new JTextArea(1070, 1500);
                MainLoop.printTextArea.setFont(new Font("Lucida Sans Typewriter", Font.PLAIN, 12));
                panel.add(MainLoop.printTextArea, BorderLayout.NORTH);
                int width = 1080;
                int height = 1400;
                MainLoop.printFrame.setSize(width, height);
                MainLoop.printFrame.setVisible(true);
            }
        } else {
            //
            //  Eliminate the print window
            //
            if (MainLoop.printFrame != null) {
                MainLoop.printFrame.dispose();
                MainLoop.printFrame = null;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        //
        //  Get configuration
        //
        readConfigurationFile();

        //
        //  Start things up
        //
        java.awt.EventQueue.invokeLater(() -> {
            String helpText = "";
            helpText += "RJE000I - RJE 3780 Emulator V" + version + " Started\r\n";
            helpText += "       \u00a9 James D. Gay - " + buildDate;
            updateStatus(helpText);
            new Rje().setVisible(true);
        });

    }

    private static void readConfigurationFile() {
        //
        //  Open up the save configuration file
        //
        BufferedReader fi = null;
        try {
            //
            //  Create default values and then try to open configuration file
            //
            String home = System.getProperty("user.home");
            MainLoop.defaultDirectory = home + "/";
            MainLoop.defaultPrintDirectory = home + "/";
            MainLoop.defaultPunchDirectory = home + "/";
            fi = new BufferedReader(new FileReader(home + "/rje3780.cfg"));

            //
            //  Get default values from configuration file
            //
            MainLoop.hostName = fi.readLine();
            MainLoop.hostPort = Integer.parseInt(fi.readLine());

            MainLoop.defaultDirectory = fi.readLine();
            if (MainLoop.defaultDirectory.length() < 2) {
                MainLoop.defaultDirectory = home + "/";
            }
            MainLoop.defaultPrintDirectory = fi.readLine();
            if (MainLoop.defaultPrintDirectory.length() < 2) {
                MainLoop.defaultPrintDirectory = home + "/";
            }
            MainLoop.defaultPunchDirectory = fi.readLine();
            if (MainLoop.defaultPunchDirectory.length() < 2) {
                MainLoop.defaultPunchDirectory = home + "/";
            }
            MainLoop.signon = fi.readLine();
            MainLoop.password = fi.readLine();
            MainLoop.pemFile = fi.readLine();
            MainLoop.createSSHTunnel = fi.readLine().contains("true");
            MainLoop.sshUsername = fi.readLine();
            MainLoop.sshPassword = fi.readLine();
            MainLoop.traceOn = fi.readLine().contains("true");
            MainLoop.removeExtraPrinterBlankLines = fi.readLine().contains("true");
            MainLoop.removeExtraPunchCards = fi.readLine().contains("true");
            MainLoop.punchWindow = fi.readLine().contains("true");
            punchWindow(MainLoop.punchWindow);
            MainLoop.printWindow = fi.readLine().contains("true");
            printWindow(MainLoop.printWindow);
            MainLoop.clearPunchTextArea = fi.readLine().contains("true");
            MainLoop.clearPrintTextArea = fi.readLine().contains("true");

        } catch (IOException | NullPointerException ex) {
            //
            // Couldn't find or access configuration file, use default values
            //
        } finally {
            try {
                if (fi != null) {
                    fi.close();

                }
            } catch (IOException ex) {
                Logger.getLogger(Rje.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Configuration;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JMenu Help;
    private javax.swing.JMenu Log;
    private javax.swing.JMenuItem LogOntoMVS;
    private javax.swing.JMenu Operate;
    private javax.swing.JMenuItem SubmitJob;
    public static javax.swing.JTextField commandField;
    public static javax.swing.JTextField hostField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem logOutOfMVS;
    private javax.swing.JMenuBar mainMenuBar;
    public static javax.swing.JTextArea mainWindow;
    private javax.swing.JScrollPane mainWindowScrollPanel;
    public static javax.swing.JTextField stateField;
    public static javax.swing.JTextField statusField;
    public static javax.swing.JTextField systemField;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
